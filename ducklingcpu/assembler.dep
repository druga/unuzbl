% SWI-Prolog

:- include('shared.pl').

%:- use_module(library(arithmetic)).
% http://www.complang.tuwien.ac.at/ulrich/Prolog-inedit/lambda.pl
%:- use_module(lambda).

:- op(500,xfx,my_is).
:- op(501,xfx,my_storing).

%:- arithmetic_fun(...).
:- initialization(arithmetic_function(binary_number/1)).
:- initialization(arithmetic_function(binary_number/2)).
:- initialization(arithmetic_function(my_copysign/2)).
:- initialization(arithmetic_function(my_sign/1)).
:- initialization(arithmetic_function(my_recorded/2)).
:- initialization(arithmetic_function(immediate_word/4)).
:- initialization(arithmetic_function(jump_word/2)).
:- initialization(arithmetic_function(find_label/2)).
:- initialization(arithmetic_function(calc_absolute/2)).
:- initialization(arithmetic_function(flatten_diff/1)).
:- initialization(arithmetic_function(parse/1)).
:- initialization(arithmetic_function(preevaluate/1)).
:- initialization(arithmetic_function(evaluate/1)).
:- initialization(arithmetic_function(storing/1)).

:- initialization(arithmetic_function(my_plus/2)).

% xxx: YAP
:- dynamic(register_arithmetic/1).
arithmetic_function(Functor/Arity) :-
        retractall(register_arithmetic(Functor/Arity)),
        assertz(register_arithmetic(Functor/Arity)).
my_storing(R,T) :-
        do_is(R,T), R \== T.
my_is(R,T) :-
        do_is(R,T), R \== T.
do_is(Result,Term) :-
        Term =.. [F|Args],
        eval_arith2(Args,Args2),
        ((length(Args2,L),
        register_arithmetic(F/L),
        my_append(Args2, [Result], Args3),
        ATermN =.. [F|Args3],
        ATermN, !)
        ;
        (ATerm =.. [F|Args2],
                Result = ATerm
        )), !.
eval_arith2([],[]).
eval_arith2([Term|Rest],[TermResult|RestResult]) :-
        do_is(TermResult,Term),
        eval_arith2(Rest, RestResult).

my_copysign(X,Y,Z) :-
	Z is copysign(X,Y).
my_sign(X,Y) :-
	Y is sign(X).
erlang_writef(F,A) :-
	format(F,A).
my_recordz(K,P) :-
	% like P0 =.. [K,P], assertz(P0)
	recordz(K,P).
my_recorded(K,R,V) :-
	recorded(K,V,R).
parse(Fn,AST) :-
	call_semidet(phrase_from_file(sentence(AST),Fn,[buffer_size(16384)])).
call_nth(Goal,C) :-
	State = count(0,_), Goal, arg(1,State,C1), 
	C2 is C1 + 1, nb_setarg(1,State,C2), C = C2.
